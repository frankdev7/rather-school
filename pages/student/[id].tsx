import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { GetStaticPathsContext, GetStaticProps, GetStaticPropsContext, GetStaticPropsResult } from 'next'
import { Relationship, Room, Student, StudentRelationship } from '@/types'
import { getRooms, getStudentRelationships } from '../api/hello'
import { useRouter } from 'next/router'

const inter = Inter({ subsets: ['latin'] })

interface Props {
  relationships: Relationship[];
}

export default function StudentPage({ relationships }: Props) {
  const router = useRouter();
  const { name, surname } = router.query;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>

        <div>
          <h2 className={inter.className}>
            {name}
          </h2>
          <p className={inter.className}>
            {surname}
          </p>
        </div>

        {relationships && (

          <div className={styles.grid}>
            {
              relationships.map((relationship) => {
                return (
                  <div key={relationship.id}>
                    <h2 className={inter.className}>
                      {relationship.student.name}
                    </h2>
                    <p className={inter.className}>
                      {relationship.student.surname}
                    </p>
                    <p className={inter.className}>
                      {relationship.relationshipType}
                    </p>
                  </div>
                )
              })
            }
          </div>
        )}

      </main>
    </>
  )
}

export async function getStaticPaths() {
  return {
    paths: [],
    fallback: true,
  }
}

export const getStaticProps: GetStaticProps<Props> = async ({ params }: GetStaticPropsContext): Promise<GetStaticPropsResult<Props>> => {
  const { id } = params as { id: string };

  const relationships: Relationship[] = await getStudentRelationships(id);

  console.log(relationships)

  return {
    props: {
      relationships
    }
  };
}

