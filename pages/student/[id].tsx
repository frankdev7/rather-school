import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { GetStaticPathsContext, GetStaticProps, GetStaticPropsContext, GetStaticPropsResult } from 'next'
import { Relationship, Room, Student, StudentRelationship } from '@/types'
import { getRooms, getStudentRelationships } from '../api/hello'
import { useRouter } from 'next/router'
import PageTitle from '../components/PageTitle'
import { Description } from '@mui/icons-material'
import Navbar from '../components/Navbar'
import { Container, Grid } from '@mui/material'
import BasicCard from '../components/BasicCard'

const inter = Inter({ subsets: ['latin'] })

interface Props {
  relationships: Relationship[];
}

export default function StudentPage({ relationships }: Props) {
  const router = useRouter();
  const { name, surname } = router.query as { name: string, surname: string };

  return (
    <>
      <Head>
        <title>Create Next App Student</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main>
        {
          name && surname &&
          <PageTitle title={name} description={surname} />
        }
        <Container sx={{ py: 8 }} maxWidth="md">
          <Grid container spacing={4}>
            {
              relationships && relationships.map((relationship) => {
                return (
                  <Grid item key={relationship.id} xs={12} sm={6} md={4}>
                    <BasicCard
                      id={relationship.id}
                      title={`${relationship.student.name}, ${relationship.student.surname}`}
                      description={relationship.relationshipType}
                      textButton="" />
                  </Grid>
                )
              })
            }
          </Grid>
        </Container>
      </main>
    </>
  )
}

export async function getStaticPaths() {
  return {
    paths: [],
    fallback: true,
  }
}

export const getStaticProps: GetStaticProps<Props> = async ({ params }: GetStaticPropsContext): Promise<GetStaticPropsResult<Props>> => {
  const { id } = params as { id: string };

  const relationships: Relationship[] = await getStudentRelationships(id);

  console.log(relationships)

  return {
    props: {
      relationships
    }
  };
}

